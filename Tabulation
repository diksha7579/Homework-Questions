// Maximum Bridge ways //

#include <iostream>
#include <vector>
using namespace std;

int maximumBridges(int a[], int b[], int n, int m) {
    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));

    // Build the table
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (a[i - 1] == b[j - 1]) {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    return dp[n][m];  // Final answer in bottom-right corner
}

int main() {
    int a[] = {1, 2, 2, 2, 1, 2};
    int b[] = {1, 2, 1, 2, 2, 1, 2, 2};
    int n = 6, m = 8;

    cout << maximumBridges(a, b, n, m) << " ways to have bridges between a and b";
}
